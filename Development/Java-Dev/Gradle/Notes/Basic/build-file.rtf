
## Gradle Build Files

### Purpose
- Gradle build files define how a project is built, including configurations, dependencies, and tasks.
- They allow for automation of the build process, making it easier to manage complex projects.

### Types of Build Files
1. **`build.gradle`**: The standard build file written in Groovy.
2. **`build.gradle.kts`**: The build file written in Kotlin DSL for type safety and better IDE support.

### Structure of a Build File
A typical Gradle build file includes the following sections:

1. **Plugins**
   - Applies necessary plugins to extend Gradle's functionality.
   ```groovy
   plugins {
       id 'java'
       id 'application'
   }
   ```

2. **Group and Version**
   - Defines the group ID and version of the project.
   ```groovy
   group 'com.example'
   version '1.0-SNAPSHOT'
   ```

3. **Repositories**
   - Specifies where to find project dependencies (e.g., Maven Central).
   ```groovy
   repositories {
       mavenCentral()
   }
   ```

4. **Dependencies**
   - Lists libraries required for the project, categorized into implementation and test dependencies.
   ```groovy
   dependencies {
       implementation 'org.springframework:spring-core:5.3.10'
       testImplementation 'junit:junit:4.13.2'
   }
   ```

5. **Tasks**
   - Custom tasks can be defined or existing tasks can be configured.
   ```groovy
   tasks.named('test') {
       useJUnitPlatform()
   }
   ```

6. **Application Configuration** (if applicable)
   - Specifies the main class for applications.
   ```groovy
   application {
       mainClass = 'com.example.Main'
   }
   ```
